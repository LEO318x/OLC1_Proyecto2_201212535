/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorarb = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[2,5,11],$V3=[1,28],$V4=[1,27],$V5=[1,32],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,33],$Va=[1,36],$Vb=[2,11,13,16,40,44,45,46,47],$Vc=[1,41],$Vd=[1,43],$Ve=[1,47],$Vf=[11,16],$Vg=[30,36],$Vh=[2,11,13,16,40,44,45,46,47,56,57,58,59,67,69,70,75],$Vi=[1,55],$Vj=[1,58],$Vk=[1,57],$Vl=[1,56],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,78],$Vt=[1,79],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[29,30,36,65,66,76,77,78,79,80,81,82,83,84,85,86],$VG=[29,36],$VH=[2,42],$VI=[29,30,36,76,77,78],$VJ=[29,30,36,76,77,78,79,80,81,82,83,84],$VK=[29,30,36,65,66,76,77,78,79,80,81,82,83,84],$VL=[1,118],$VM=[1,140],$VN=[2,49],$VO=[1,137],$VP=[1,138],$VQ=[1,139],$VR=[1,141],$VS=[1,143],$VT=[1,144],$VU=[1,145],$VV=[1,147],$VW=[2,13,16,40,44,45,46,47,56,57,58,59,67,69,70,75],$VX=[2,13,16,40,44,45,46,47,56,57,58,59,67,69,70,74,75],$VY=[2,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"TODO":4,"EOF":5,"INSTRUCCIONESTODO":6,"LISTASINTAXIS":7,"SINTAXISCLASE":8,"SINTAXISINTERFACE":9,"ERROR2":10,"tk_public":11,"tk_class":12,"tk_identificador":13,"tk_llaa":14,"TODOCLASE":15,"tk_llac":16,"TODOCLASELISTA":17,"VARIABLES":18,"ASIGNACIONVAR":19,"FUNCIONES":20,"METODOS":21,"MAIN":22,"tk_interface":23,"TODOINTERFACE":24,"TODOINTERFACELISTA":25,"TIPORETORNO":26,"tk_para":27,"PARAMETROS":28,"tk_parc":29,"tk_puntocoma":30,"TIPO":31,"LISTAVARIABLES":32,"tk_igual":33,"EXP":34,"SINTAXISVARIABLE":35,"tk_coma":36,"tk_static":37,"tk_void":38,"tk_main":39,"tk_String":40,"tk_cora":41,"tk_corc":42,"INSTRUCCIONES":43,"tk_int":44,"tk_double":45,"tk_boolean":46,"tk_char":47,"LISTAPARAMETROS":48,"LISTAPARAMETROS2":49,"LISTAINSTRUCCIONES":50,"LISTAINSTRUCCIONESSINTAXIS":51,"IF":52,"FOR":53,"WHILE":54,"DOWHILE":55,"tk_break":56,"tk_continue":57,"tk_return":58,"tk_system":59,"tk_punto":60,"tk_out":61,"tk_println":62,"PRINT":63,"tk_print":64,"tk_mas":65,"tk_menos":66,"tk_for":67,"DEC":68,"tk_while":69,"tk_do":70,"LISTAIF":71,"ELSE":72,"SINTAXISIF":73,"tk_else":74,"tk_if":75,"tk_and":76,"tk_or":77,"tk_xor":78,"tk_menorigual":79,"tk_mayorigual":80,"tk_dobleigual":81,"tk_menorq":82,"tk_mayorq":83,"tk_diferente":84,"tk_multi":85,"tk_div":86,"tk_not":87,"VAL":88,"tk_entero":89,"tk_decimal":90,"tk_cadena":91,"tk_cadenasimple":92,"tk_true":93,"tk_false":94,"ERROR":95,"tk_error":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"tk_public",12:"tk_class",13:"tk_identificador",14:"tk_llaa",16:"tk_llac",23:"tk_interface",27:"tk_para",29:"tk_parc",30:"tk_puntocoma",33:"tk_igual",36:"tk_coma",37:"tk_static",38:"tk_void",39:"tk_main",40:"tk_String",41:"tk_cora",42:"tk_corc",44:"tk_int",45:"tk_double",46:"tk_boolean",47:"tk_char",56:"tk_break",57:"tk_continue",58:"tk_return",59:"tk_system",60:"tk_punto",61:"tk_out",62:"tk_println",64:"tk_print",65:"tk_mas",66:"tk_menos",67:"tk_for",69:"tk_while",70:"tk_do",74:"tk_else",75:"tk_if",76:"tk_and",77:"tk_or",78:"tk_xor",79:"tk_menorigual",80:"tk_mayorigual",81:"tk_dobleigual",82:"tk_menorq",83:"tk_mayorq",84:"tk_diferente",85:"tk_multi",86:"tk_div",87:"tk_not",89:"tk_entero",90:"tk_decimal",91:"tk_cadena",92:"tk_cadenasimple",93:"tk_true",94:"tk_false",96:"tk_error"},
productions_: [0,[3,2],[4,1],[4,0],[6,1],[6,2],[7,1],[7,1],[7,1],[8,6],[15,2],[15,1],[15,0],[17,1],[17,1],[17,1],[17,1],[17,1],[9,6],[24,2],[24,1],[24,0],[25,7],[18,3],[18,2],[19,4],[32,1],[32,3],[35,3],[35,1],[22,13],[20,9],[21,7],[26,1],[26,1],[31,1],[31,1],[31,1],[31,1],[31,1],[28,2],[28,4],[28,0],[48,1],[48,3],[49,1],[49,3],[49,0],[43,1],[43,0],[50,2],[50,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,2],[51,2],[51,3],[51,2],[51,5],[51,9],[51,9],[51,4],[51,4],[63,1],[63,0],[53,11],[54,7],[55,9],[52,2],[71,1],[71,3],[73,7],[72,4],[72,0],[68,4],[68,3],[68,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,4],[34,3],[34,2],[34,2],[34,3],[34,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[95,1],[95,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 /*console.log($$[$0-1]);*/ return { name: 'RAIZ', children: $$[$0-1] }; 
break;
case 2:
this.$=[{name: 'INSTRUCCIONESTODO', children: $$[$0]}];
break;
case 4:
this.$=[{name: 'LISTASINTAXIS', children: $$[$0]}];
break;
case 5:
 $$[$0-1].push( { name: 'LISTASINTAXIS', children: $$[$0] } ); this.$ = $$[$0-1]; 
break;
case 6:
this.$=[{name: 'SINTAXISCLASE', children: $$[$0]}];
break;
case 7:
this.$=[{name: 'SINTAXISINTERFACE', children: $$[$0]}];
break;
case 9:
this.$=[{name: $$[$0-5]},{name: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'TODOCLASE', children: $$[$0-1]},{name: $$[$0]}];
break;
case 10:
$$[$0-1].push( { name: 'TODOCLASELISTA', children: $$[$0] } ); this.$ = $$[$0-1];
break;
case 11:
this.$=[{name: 'TODOCLASELISTA', children: $$[$0]}];
break;
case 13: case 52:
this.$=[{name: 'VARIABLES', children: $$[$0]}];
break;
case 14: case 53:
this.$=[{name: 'ASIGNACIONVAR', children: $$[$0]}];
break;
case 15:
this.$=[{name: 'FUNCIONES', children: $$[$0]}];
break;
case 16:
this.$=[{name: 'METODOS', children: $$[$0]}];
break;
case 17:
this.$=[{name: 'MAIN', children: $$[$0]}];
break;
case 18:
this.$=[{name: $$[$0-5]},{name: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'TODOINTERFACE', children: $$[$0-1]},{name: $$[$0]}];
break;
case 19:
$$[$0-1].push( { name: 'TODOINTERFACELISTA', children: $$[$0] } ); this.$ = $$[$0-1];
break;
case 20:
this.$=[{name: 'TODOINTERFACELISTA', children: $$[$0]}];
break;
case 22: case 32:
this.$=[{name: $$[$0-6]},{name: 'TIPORETORNO', children: $$[$0-5]},{name: $$[$0-4]},{name: $$[$0-3]},{name: 'PARAMETROS', children: $$[$0-2]},{name: $$[$0-1]}];
break;
case 23:
this.$=[{name: 'TIPO', children: $$[$0-2]},{name: 'LISTAVARIABLES', children: $$[$0-1]}];
break;
case 25:
this.$=[{name: $$[$0-3]},{name: $$[$0-2]},{name: 'EXP', children: $$[$0-1]}];
break;
case 26:
this.$=[{name: 'SINTAXISVARIABLE', children: $$[$0]}];
break;
case 27:
this.$=$$[$0-2].push( { name: 'SINTAXISVARIABLE', children: $$[$0] } ); this.$ = $$[$0-2];
break;
case 28:
this.$=[{name: $$[$0-2]}, {name: $$[$0-1]}, {name: 'EXP', children: $$[$0]}];
break;
case 29:
this.$=[{name: $$[$0]}];
break;
case 30:
this.$=[{name: $$[$0-12]},{name: $$[$0-11]},{name: $$[$0-10]},{name: $$[$0-9]},{name: $$[$0-8]},{name: $$[$0-7]},{name: $$[$0-6]},{name: $$[$0-5]},{name: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'INSTRUCCIONES', children: $$[$0-1]},{name: $$[$0]}];
break;
case 31:
this.$=[{name: $$[$0-8]},{name: 'TIPORETORNO', children: $$[$0-7]},{name: $$[$0-6]},{name: $$[$0-5]},{name: 'PARAMETROS', children: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'INSTRUCCIONES', children: $$[$0-1]},{name: $$[$0]}];
break;
case 33:
this.$ = [{name: 'TIPO', children: $$[$0]}];
break;
case 34: case 35: case 36: case 37: case 38: case 39: case 80: case 102: case 103: case 104: case 105: case 106:
this.$ = [{name: $$[$0]}];
break;
case 40:
this.$ = [{name: 'TIPO', children: $$[$0-1]},{name: $$[$0]}];
break;
case 41:
$$[$0-3].push({name: 'PARAMETROS', children: [{name: 'TIPO', children: $$[$0-1]},{name: $$[$0]}]}); this.$=$$[$0-3];
break;
case 43: case 45:
this.$ = [{name: 'EXP', children: $$[$0]}];
break;
case 44: case 46:
$$[$0-2].push({name: 'EXP', children: $$[$0]}); this.$=$$[$0-2];
break;
case 48:
this.$=[{name: 'LISTAINSTRUCCIONES', children: $$[$0]}];
break;
case 50:
$$[$0-1].push({name: 'LISTAINSTRUCCIONESSINTAXIS', children: $$[$0]}); this.$=$$[$0-1];
break;
case 51:
this.$=[{name: 'LISTAINSTRUCCIONESSINTAXIS', children: $$[$0]}];
break;
case 54:
this.$=[{name: 'IF', children: $$[$0]}];
break;
case 55:
this.$=[{name: 'FOR', children: $$[$0]}];
break;
case 56:
this.$=[{name: 'WHILE', children: $$[$0]}];
break;
case 57:
this.$=[{name: 'DOWHILE', children: $$[$0]}];
break;
case 58: case 59: case 61:
this.$=[{name: $$[$0-1]}];
break;
case 60:
this.$=[{name: 'return'}, {name: 'EXP', children: $$[$0-1]}];
break;
case 62:
this.$=[{name: $$[$0-4]},{name: $$[$0-3]},{name: 'LISTAPARAMETROS2', children: $$[$0-2]},{name: $$[$0-1]}];
break;
case 63:
this.$=[{name: 'System'},{name:'out'},{name:'println'},{name:'('}, {name: 'PRINT', children: $$[$0-2]}, {name: ')'}];
break;
case 64:
this.$=[{name: 'System'},{name:'out'},{name:'printl'},{name:'('}, {name: 'PRINT', children: $$[$0-2]}, {name: ')'}];
break;
case 65:
this.$=[{name: 'INCREMENTO', children: [{name: $$[$0-3]}, {name: '++'}]}];
break;
case 66:
this.$=[{name: 'DECREMENTO', children: [{name: $$[$0-3]}, {name: '--'}]}];
break;
case 67:
this.$=[{name: 'EXP', children: $$[$0]}];
break;
case 69:
this.$=[{name: $$[$0-10]},{name: $$[$0-9]},{name: 'DEC', children: $$[$0-8]},{name: $$[$0-7]},{name: 'EXP', children: $$[$0-6]},{name: $$[$0-5]},{name: 'EXP', children: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'INSTRUCCIONES', children: $$[$0-1]},{name: $$[$0]}];
break;
case 70: case 75:
this.$=[{name: $$[$0-6]},{name: $$[$0-5]},{name: 'EXP', children: $$[$0-4]},{name: $$[$0-3]},{name: $$[$0-2]},{name: 'INSTRUCCIONES', children: $$[$0-1]},{name: $$[$0]}];
break;
case 71:
this.$=[{name: $$[$0-8]},{name: $$[$0-7]},{name: 'INSTRUCCIONES', children: $$[$0-6]},{name: $$[$0-5]},{name: $$[$0-4]},{name: $$[$0-3]},{name: 'EXP', children: $$[$0-2]},{name: $$[$0-1]},{name: $$[$0]}];
break;
case 72:
this.$=[{name: 'LISTAIF', children: $$[$0-1]},{name: 'ELSE', children: $$[$0]}];
break;
case 73:
this.$=[{name: 'SINTAXISIF', children: $$[$0]}];
break;
case 74:
this.$=$$[$0-2].push({name: 'else'}, {name: 'SINTAXISIF', children: $$[$0]}); this.$ = $$[$0-2];
break;
case 76:
this.$=[{name: $$[$0-3]},{name: $$[$0-2]},{name: 'INSTRUCCIONES', children: $$[$0-1]},{name: $$[$0]}];
break;
case 78:
this.$ = [{name: 'TIPO', children: $$[$0-3]}, {name: $$[$0-2]}, {name: '='}, {name: 'EXP', children: $$[$0]}];
break;
case 79:
this.$ = [{name: $$[$0-2]}, {name: '='}, {name: 'EXP', children: $$[$0]}];
break;
case 81:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '&&'}, {name: 'EXP', children: $$[$0]}];
break;
case 82:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '||'}, {name: 'EXP', children: $$[$0]}];
break;
case 83:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '^'}, {name: 'EXP', children: $$[$0]}];
break;
case 84:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '<='}, {name: 'EXP', children: $$[$0]}];
break;
case 85:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '>='}, {name: 'EXP', children: $$[$0]}];
break;
case 86:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '=='}, {name: 'EXP', children: $$[$0]}];
break;
case 87:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '++'}];
break;
case 88:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '--'}];
break;
case 89:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '<'}, {name: 'EXP', children: $$[$0]}];
break;
case 90:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '>'}, {name: 'EXP', children: $$[$0]}];
break;
case 91:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '!='}, {name: 'EXP', children: $$[$0]}];
break;
case 92:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '+'}, {name: 'EXP', children: $$[$0]}];
break;
case 93:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '-'}, {name: 'EXP', children: $$[$0]}];
break;
case 94:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '*'}, {name: 'EXP', children: $$[$0]}];
break;
case 95:
this.$ = [{name: 'EXP', children: $$[$0-2]}, {name: '/'}, {name: 'EXP', children: $$[$0]}];
break;
case 96:
this.$ = [{name: $$[$0-3]}, {name:'('}, {name: 'LISTAPARAMETROS', children: $$[$0-1]}, {name: ')'}];
break;
case 97:
this.$ = [{name: $$[$0-2]}, {name: '('}, {name: ')'}];
break;
case 98:
this.$ = [{name: '!'}, {name: 'EXP', children: $$[$0]}];
break;
case 99:
this.$ = [{name: '-'}, {name: 'EXP', children: $$[$0]}];
break;
case 100:
this.$ = [{name: '('}, {name: 'EXP', children: $$[$0-1]}, {name: ')'}];
break;
case 101:
this.$ = [{name: 'VAL', children: $$[$0]}];
break;
case 107:
this.$ = [{name: 'true'}];
break;
case 108:
this.$ = [{name: 'false'}];
break;
case 109:
console.log('error: '+yytext+ 'fila :'+this._$.first_line);
break;
case 110:
return 'ERROR IRRECUPERABLE, F en el chat xD'
break;
case 111:
console.log('error: '+yytext+ ' fila: '+this._$.first_line);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:7,11:$V1},{1:[3]},{5:[1,10]},{2:$V0,5:[2,2],7:11,8:5,9:6,10:7,11:$V1},o($V2,[2,4]),o($V2,[2,6]),o($V2,[2,7]),o($V2,[2,8]),{12:[1,12],23:[1,13]},o([2,5,11,30],[2,111]),{1:[2,1]},o($V2,[2,5]),{13:[1,14]},{13:[1,15]},{14:[1,16]},{14:[1,17]},{2:$V0,10:26,11:$V3,13:$V4,15:18,16:[2,12],17:19,18:20,19:21,20:22,21:23,22:24,31:25,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9},{11:$Va,16:[2,21],24:34,25:35},{2:$V0,10:26,11:$V3,13:$V4,16:[1,37],17:38,18:20,19:21,20:22,21:23,22:24,31:25,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9},o($Vb,[2,11]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),{13:$Vc,32:39,35:40},{30:[1,42]},{33:$Vd},{26:44,31:46,37:[1,45],38:$Ve,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9},{13:[2,35]},{13:[2,36]},{13:[2,37]},{13:[2,38]},{13:[2,39]},{11:$Va,16:[1,48],25:49},o($Vf,[2,20]),{26:50,31:46,38:$Ve,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9},o($V2,[2,9]),o($Vb,[2,10]),{30:[1,51],36:[1,52]},o($Vg,[2,26]),o($Vg,[2,29],{33:[1,53]}),o($Vh,[2,24]),{13:$Vi,27:$Vj,34:54,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:[1,66]},{38:[1,67]},{13:[2,33]},{13:[2,34]},o($V2,[2,18]),o($Vf,[2,19]),{13:[1,68]},o($Vh,[2,23]),{13:$Vc,35:69},{13:$Vi,27:$Vj,34:70,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{30:[1,71],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},o($VF,[2,102],{27:[1,85]}),{13:$Vi,27:$Vj,34:86,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:87,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:88,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VF,[2,101]),o($VF,[2,103]),o($VF,[2,104]),o($VF,[2,105]),o($VF,[2,106]),o($VF,[2,107]),o($VF,[2,108]),{27:[1,89]},{39:[1,90]},{27:[1,91]},o($Vg,[2,27]),o($Vg,[2,28],{65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),o($Vh,[2,25]),{13:$Vi,27:$Vj,34:92,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:93,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:94,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:95,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:96,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:97,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:99,65:[1,98],66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:101,66:[1,100],87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:102,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:103,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:104,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:105,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:106,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,29:[1,108],34:109,48:107,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VF,[2,98]),o($VF,[2,99]),{29:[1,110],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},o($VG,$VH,{28:111,31:112,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9}),{27:[1,113]},o($VG,$VH,{31:112,28:114,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9}),o($VI,[2,81],{65:$Vs,66:$Vt,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),o($VI,[2,82],{65:$Vs,66:$Vt,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),o($VI,[2,83],{65:$Vs,66:$Vt,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),o($VJ,[2,84],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VJ,[2,85],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VJ,[2,86],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VF,[2,87]),o($VK,[2,92],{85:$VD,86:$VE}),o($VF,[2,88],{88:59,34:87,13:$Vi,27:$Vj,87:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),o($VK,[2,93],{85:$VD,86:$VE}),o($VJ,[2,89],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VJ,[2,90],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VJ,[2,91],{65:$Vs,66:$Vt,85:$VD,86:$VE}),o($VF,[2,94]),o($VF,[2,95]),{29:[1,115],36:[1,116]},o($VF,[2,97]),o($VG,[2,43],{65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),o($VF,[2,100]),{29:[1,117],36:$VL},{13:[1,119]},{40:[1,120]},{29:[1,121],36:$VL},o($VF,[2,96]),{13:$Vi,27:$Vj,34:122,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:[1,123],30:[1,124]},{31:125,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9},o($VG,[2,40]),{41:[1,126]},{30:[1,127]},o($VG,[2,44],{65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:128,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},o($Vb,[2,32]),{13:[1,148]},{42:[1,149]},o($Vf,[2,22]),{16:[1,150]},{2:$V0,10:26,13:$VM,16:[2,48],18:131,19:132,31:25,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,51:151,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55]),o($VW,[2,56]),o($VW,[2,57]),{30:[1,152]},{30:[1,153]},{13:$Vi,27:$Vj,30:[1,155],34:154,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{27:[1,156],33:$Vd,65:[1,157],66:[1,158]},{60:[1,159]},o($VW,[2,77],{72:160,74:[1,161]}),{27:[1,162]},{27:[1,163]},{14:[1,164]},o($VX,[2,73]),{27:[1,165]},o($VG,[2,41]),{13:[1,166]},o($Vb,[2,31]),o($VW,[2,50]),o($VW,[2,58]),o($VW,[2,59]),{30:[1,167],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},o($VW,[2,61]),o($VG,[2,47],{88:59,49:168,34:169,13:$Vi,27:$Vj,66:$Vk,87:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),{65:[1,170]},{66:[1,171]},{61:[1,172]},o($VW,[2,72]),{14:[1,174],73:173,75:$VV},{13:[1,177],31:176,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,68:175},{13:$Vi,27:$Vj,34:178,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:179,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},{13:$Vi,27:$Vj,34:180,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{29:[1,181]},o($VW,[2,60]),{29:[1,182],36:[1,183]},o($VG,[2,45],{65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),{30:[1,184]},{30:[1,185]},{60:[1,186]},o($VX,[2,74]),{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:187,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},{30:[1,188]},{13:[1,189]},{30:[2,80],33:[1,190]},{29:[1,191],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{16:[1,192]},{29:[1,193],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{14:[1,194]},{30:[1,195]},{13:$Vi,27:$Vj,34:196,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VW,[2,65]),o($VW,[2,66]),{62:[1,197],64:[1,198]},{16:[1,199]},{13:$Vi,27:$Vj,34:200,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{33:[1,201]},{13:$Vi,27:$Vj,34:202,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:[1,203]},{69:[1,204]},{14:[1,205]},{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:206,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},o($VW,[2,62]),o($VG,[2,46],{65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE}),{27:[1,207]},{27:[1,208]},o($VW,[2,76]),{30:[1,209],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{13:$Vi,27:$Vj,34:210,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{30:[2,79],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:211,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},{27:[1,212]},{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:213,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},{16:[1,214]},{13:$Vi,27:$Vj,29:$VY,34:216,63:215,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,29:$VY,34:216,63:217,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{13:$Vi,27:$Vj,34:218,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{30:[2,78],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{16:[1,219]},{13:$Vi,27:$Vj,34:220,66:$Vk,87:$Vl,88:59,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{16:[1,221]},o($Vb,[2,30]),{29:[1,222]},{29:[2,67],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},{29:[1,223]},{29:[1,224],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},o($VW,[2,70]),{29:[1,225],65:$Vs,66:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$VD,86:$VE},o($VX,[2,75]),{30:[1,226]},{30:[1,227]},{14:[1,228]},{30:[1,229]},o($VW,[2,63]),o($VW,[2,64]),{2:$V0,10:26,13:$VM,16:$VN,18:131,19:132,31:25,40:$V5,43:230,44:$V6,45:$V7,46:$V8,47:$V9,50:129,51:130,52:133,53:134,54:135,55:136,56:$VO,57:$VP,58:$VQ,59:$VR,67:$VS,69:$VT,70:$VU,71:142,73:146,75:$VV},o($VW,[2,71]),{16:[1,231]},o($VW,[2,69])],
defaultActions: {10:[2,1],29:[2,35],30:[2,36],31:[2,37],32:[2,38],33:[2,39],46:[2,33],47:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let lisErrorLexico = [], lisErrorSintactico = [], lisTokens = [], lisTraduccion = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  
break;
case 1:
break;
case 2:
break;
case 3: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_cadena', yy_.yytext]); return 91
break;
case 4: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_cadenasimple', yy_.yytext]); return 92 
break;
case 5: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_decimal', yy_.yytext]); return 90;
break;
case 6: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_entero', yy_.yytext]); return 89; 
break;
case 7: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_public', yy_.yytext]); return 11; 
break;
case 8: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_class', yy_.yytext]); return 12; 
break;
case 9: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_interface', yy_.yytext]); return 23; 
break;
case 10: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_void', yy_.yytext]); return 38; 
break;
case 11: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_main', yy_.yytext]); return 39; 
break;
case 12: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_static', yy_.yytext]); return 37; 
break;
case 13: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_for', yy_.yytext]); return 67; 
break;
case 14: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_while', yy_.yytext]); return 69; 
break;
case 15: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_do', yy_.yytext]); return 70; 
break;
case 16: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_if', yy_.yytext]); return 75; 
break;
case 17: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_else', yy_.yytext]); return 74; 
break;
case 18: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_int', yy_.yytext]); return 44; 
break;
case 19: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_boolean', yy_.yytext]); return 46; 
break;
case 20: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_double', yy_.yytext]); return 45; 
break;
case 21: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_String', yy_.yytext]); return 40; 
break;
case 22: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_char', yy_.yytext]); return 47; 
break;
case 23: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_true', yy_.yytext]); return 93; 
break;
case 24: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_false', yy_.yytext]); return 94; 
break;
case 25: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_break', yy_.yytext]); return 56; 
break;
case 26: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_continue', yy_.yytext]); return 57; 
break;
case 27: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_return', yy_.yytext]); return 58; 
break;
case 28: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_system', yy_.yytext]); return 59; 
break;
case 29: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_out', yy_.yytext]); return 61; 
break;
case 30: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_print', yy_.yytext]); return 64; 
break;
case 31: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_println', yy_.yytext]); return 62; 
break;
case 32: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_para', yy_.yytext]); return 27; 
break;
case 33: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_parc', yy_.yytext]); return 29; 
break;
case 34: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_llaa', yy_.yytext]); return 14; 
break;
case 35: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_llac', yy_.yytext]); return 16; 
break;
case 36: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_cora', yy_.yytext]); return 41; 
break;
case 37: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_corc', yy_.yytext]); return 42; 
break;
case 38: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_and', yy_.yytext]); return 76; 
break;
case 39: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_or', yy_.yytext]); return 77; 
break;
case 40: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_xor', yy_.yytext]); return 78; 
break;
case 41: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_mayorigual', yy_.yytext]); return 80; 
break;
case 42: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_menorigual', yy_.yytext]); return 79; 
break;
case 43: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_dobleigual', yy_.yytext]); return 81; 
break;
case 44: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_diferente', yy_.yytext]); return 84; 
break;
case 45: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_mayorq', yy_.yytext]); return 83; 
break;
case 46: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_menorq', yy_.yytext]); return 82; 
break;
case 47: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_not', yy_.yytext]); return 87; 
break;
case 48: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_mas', yy_.yytext]); return 65; 
break;
case 49: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_menos', yy_.yytext]); return 66; 
break;
case 50: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_multi', yy_.yytext]); return 85; 
break;
case 51: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_div', yy_.yytext]); return 86; 
break;
case 52: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_igual', yy_.yytext]); return 33; 
break;
case 53: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_punto', yy_.yytext]); return 60; 
break;
case 54: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_coma', yy_.yytext]); return 36; 
break;
case 55: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_dospuntos', yy_.yytext]); return 'tk_dospuntos'; 
break;
case 56: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_puntocoma', yy_.yytext]); return 30; 
break;
case 57: lisTokens.push([yy_.yylloc.first_line, yy_.yylloc.first_column, 'tk_identificador', yy_.yytext]); return 13; 
break;
case 58: return 5; 
break;
case 59:
    lisErrorLexico.push(["Fila: "+yy_.yylloc.first_line, "Columna: "+yy_.yylloc.first_column, "Descripcion: "+yy_.yytext]); 

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*['])/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:static\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorarb;
exports.Parser = analizadorarb.Parser;
exports.parse = function () { return analizadorarb.parse.apply(analizadorarb, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}